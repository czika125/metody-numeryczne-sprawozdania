
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#zad 1\n",
    "\n",
    "from math import pi\n",
    "\n",
    "def cylinder_area(r:float,h:float):\n",
    "    if r>0 and h>0:\n",
    "        print(\"Pole walca\")\n",
    "        print(2*pi*r*r + 2*pi*r*h)\n",
    "    else :\n",
    "        print('NaN')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 1.5, 3. , 4.5, 6. , 7.5])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#zad 2\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "np.linspace(1,2,num=5)\n",
    "np.arange(0, 9, 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 2, 3, 5, 8, 13, 21]\n"
     ]
    }
   ],
   "source": [
    "#zad 3\n",
    "\n",
    "def fib(n):\n",
    "    lista = [1, 1]\n",
    "\n",
    "    while len(lista) < n:\n",
    "        lista.append(lista[-2] + lista[-1])\n",
    "\n",
    "    return lista\n",
    "\n",
    "\n",
    "print(fib(8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Macierz M\n",
      "[[ 3  1 -3]\n",
      " [ 0  1  1]\n",
      " [-3  3  1]]\n",
      "Minv\n",
      "[[ 0.11111111  0.55555556 -0.22222222]\n",
      " [ 0.16666667  0.33333333  0.16666667]\n",
      " [-0.16666667  0.66666667 -0.16666667]]\n",
      "Mt\n",
      "[[ 3  0 -3]\n",
      " [ 1  1  3]\n",
      " [-3  1  1]]\n",
      "Mdet\n",
      "-17.999999999999996\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#zad 4 \n",
    "\n",
    "\n",
    "def matrix_calculations(a:float):\n",
    "    M = np.array([[a, 1, -a], [0, 1, 1], [-a, a, 1]]) \n",
    "    Minv = np.linalg.inv(M)\n",
    "    Mt = np.transpose(M)     \n",
    "    Mdet = np.linalg.det(M)  \n",
    "    print(\"Macierz M\\n{0}\".format(M))\n",
    "    print(\"Minv\\n{0}\".format(Minv))\n",
    "    print(\"Mt\\n{0}\".format(Mt))\n",
    "    print(\"Mdet\\n{0}\".format(Mdet))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Macierz M=\n",
      "[[ 3  1 -2  4]\n",
      " [ 0  1  1  5]\n",
      " [-2  1  1  6]\n",
      " [ 4  3  0  1]]\n",
      "Elementy Macierzy (1,1):\n",
      " 3\n",
      "Elementy Macierzy (3,3):\n",
      " 1\n",
      "Elementy Macierzy (3,2):\n",
      " 1\n",
      "3 kolumna Macierzy M :\n",
      " [-2  1  1  0]\n",
      "2 wiersz Macierzy M :\n",
      " [0 1 1 5]\n"
     ]
    }
   ],
   "source": [
    "#zad 5\n",
    "M = np.array([[3,1,-2,4],[0,1,1,5],[-2,1,1,6],[4,3,0,1]])\n",
    "print(\"Macierz M=\\n{0}\".format(M)) \n",
    "element1 = M[0,0]\n",
    "element2 = M[2,2]\n",
    "element3 = M[2,1]\n",
    "w1 = M[:,2]\n",
    "w2 = M[1,:]\n",
    "print(\"Elementy Macierzy (1,1):\\n {0}\".format(element1))\n",
    "print(\"Elementy Macierzy (3,3):\\n {0}\".format(element2))\n",
    "print(\"Elementy Macierzy (3,2):\\n {0}\".format(element3))\n",
    "print(\"3 kolumna Macierzy M :\\n {0}\".format(w1))\n",
    "print(\"2 wiersz Macierzy M :\\n {0}\".format(w2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1. 2. 3. 4. 5.]\n",
      " [1. 1. 2. 3. 4. 5.]\n",
      " [2. 2. 2. 3. 4. 5.]\n",
      " [3. 3. 3. 3. 4. 5.]]\n"
     ]
    }
   ],
   "source": [
    "#zad 6\n",
    "\n",
    "def custom_matrix(m, n):\n",
    "    base_matrix = np.zeros((m, n))  \n",
    "    for i in range(m):\n",
    "        for j in range(n):\n",
    "            if i > j:\n",
    "                base_matrix[i, j] = i\n",
    "            else:\n",
    "                base_matrix[i, j] = j\n",
    "\n",
    "    return base_matrix\n",
    "print(custom_matrix(4, 6))\n",
    "zero_matrix = np.zeros((2, 2))\n",
    "ones_matrix = np.ones((3, 1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Macierz v1=\n",
      "[[ 1]\n",
      " [ 3]\n",
      " [13]]\n",
      "Macierz v2=\n",
      "[[ 8]\n",
      " [ 5]\n",
      " [-2]]\n",
      "[[  8]\n",
      " [ 15]\n",
      " [-26]]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "shapes (3,1) and (3,1) not aligned: 1 (dim 1) != 3 (dim 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-68-2b72eb062f77>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mv2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mv1\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mv2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mv1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mv1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: shapes (3,1) and (3,1) not aligned: 1 (dim 1) != 3 (dim 0)"
     ]
    }
   ],
   "source": [
    "#zad 7\n",
    "\n",
    "v1 = np.array([[1],[3],[13]])\n",
    "v2 = np.array([[8],[5],[-2]])\n",
    "print(\"Macierz v1=\\n{0}\".format(v1)) \n",
    "print(\"Macierz v2=\\n{0}\".format(v2)) \n",
    "np.multiply(4,v1)\n",
    "np.add(-v2,[[2],[2],[2]])\n",
    "print(v1*v2)\n",
    "np.dot(v1,v1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 =\n",
      " [[  1  -7   3]\n",
      " [-12   3   4]\n",
      " [  5  13  -3]]\n",
      "w1 =\n",
      " [[  3 -21   9]\n",
      " [-36   9  12]\n",
      " [ 15  39  -9]]\n",
      "w2 =\n",
      " [[  4. -20.  10.]\n",
      " [-35.  10.  13.]\n",
      " [ 16.  40.  -8.]]\n",
      "w3 =\n",
      " [[  1 -12   5]\n",
      " [ -7   3  13]\n",
      " [  3   4  -3]]\n",
      "w4 =\n",
      " [[19]\n",
      " [49]\n",
      " [ 5]]\n",
      "w5 =\n",
      " [-62 -67  50]\n"
     ]
    }
   ],
   "source": [
    "#zad 8\n",
    "\n",
    "M1 = np.array([[1, -7, 3], [-12, 3, 4], [5, 13, -3]])\n",
    "v1 = np.array([[1],[3],[13]])\n",
    "v2_T = np.array([8,5,-2])\n",
    "# Mnozenie macierzy przez skalar:\n",
    "w1 = 3 * M1\n",
    "\n",
    "# Dodawanie macierzy:\n",
    "w2 = 3 * M1 + np.ones([3, 3])\n",
    "\n",
    "\n",
    "# Transpozycja macierzy:\n",
    "w3 = M1.T\n",
    "\n",
    "# Mnozenie macierzowe:\n",
    "w4 = M1 @ v1\n",
    "w5 = v2_T @ M1\n",
    "\n",
    "# Wypisanie wynikow:\n",
    "print('M1 =\\n', M1)\n",
    "print('w1 =\\n', w1)\n",
    "print('w2 =\\n', w2)\n",
    "print('w3 =\\n', w3)\n",
    "print('w4 =\\n', w4)\n",
    "print('w5 =\\n', w5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
